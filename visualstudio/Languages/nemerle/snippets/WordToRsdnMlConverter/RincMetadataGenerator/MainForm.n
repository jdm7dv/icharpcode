using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace RincMetadataGenerator
{
  /// <summary>
  /// Description of MainForm.
  /// </summary>
  public partial class MainForm : Form
  {
    public this()
    {
      InitializeComponent();
    }
  
    private MainForm_Load(_sender : object,  _e : System.EventArgs) : void
    {
      _numYear.Minimum = 2000;
      _numYear.Maximum = 3000;
      _numYear.Value   = 2009;

      _numJurNum.Minimum = 1;
      _numJurNum.Maximum = 6;
      _numJurNum.Value   = 4;
      
      _numPageCount.Minimum = 30;
      _numPageCount.Maximum = 300;
      _numPageCount.Value   = 72;
    }
  
    private _pbBrowse_Click (_sender : object,  _e : System.EventArgs) : void
    {
      _folderBrowserDialog.SelectedPath = _tbPath.Text;
    
      when (_folderBrowserDialog.ShowDialog(this) == DialogResult.OK)
      {
        _tbPath.Text = _folderBrowserDialog.SelectedPath;
      }
    }
  
    private mutable panel1 : System.Windows.Forms.Panel;
  
    private mutable webBrowser1 : System.Windows.Forms.WebBrowser;
  
    private _pbGenerateMetadata_Click (_sender : object,  _e : System.EventArgs) : void
    {
      def path = _tbPath.Text;
      
      if (Directory.Exists(path))
      {
        // Fixme: The "x.Value :> int" cause: ICE: got some unknown exception of type System.InvalidCastException: Не удалось привести
        def val(x) : int { Convert.ToInt32(x.Value) }
        def generator = MetadataGenerator(path, val(_numYear), val(_numJurNum), val(_numPageCount), _tbCreator.Text);
        def xmlPath = generator.Generate();
        
        _lbErrors.Items.Clear();
        
        if (generator.Errors.Length > 0)
        {
          _lbErrors.Items.AddRange(generator.Errors :> array[object]);
          _tabControl.SelectedIndex = 1;
        }
        else
          _tabControl.SelectedIndex = 0;
        
        webBrowser1.Navigate(xmlPath);
      }
      else
        _ = MessageBox.Show(this, $<#Вы задали некорректный путь к журналу: "$path"#>);
    }
  
    private _lbErrors_DoubleClick (_ : object,  _ : System.EventArgs) : void
    {
      match (_lbErrors.SelectedItem)
      {
        | error is Error =>
          def docPath = Path.ChangeExtension(error.Path, ".doc");
          def docPath = if (File.Exists(docPath)) docPath else Path.ChangeExtension(error.Path, ".docx");
          
          if (File.Exists(docPath))
            _ = Diagnostics.Process.Start(docPath);
          else
            _ = MessageBox.Show(this, $<#Не удалось найти .doc- или .docx-файл соотвествющий RSDN ML-файлу: "$(error.Path)"#>);
        
        | _              => ()
      }
    }
  }
}
