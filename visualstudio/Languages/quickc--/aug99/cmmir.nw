
\section{Intermediate code}

% l2h substitution PAL C--

\subsection{Intermediate-code nodes}

The design of the intermediate form is governed by the following
desiderata:
\begin{itemize}
\item
It should be relatively easy to assign it a formal semantics, viz, the
semantics in ``Exceptions need not be exceptional.''
\item
It should be straightforward to translate to it from abstract syntax.
\item
It should be straightforward to generate simple machine code, using
primarily local strategies.
\item
It should be straightforward to generate tables that will support the
{\PAL} run-time system.
\end{itemize}

The [[IRNode]] module defines only the nodes used to represent
procedures.
These, together with other data types, may be stitched together to
represent and entire {\PAL} module.
We assume that the global context representing the module provides
\begin{itemize}
\item 
The {\PAL} [[global]] declarations in the context of which the
module is compiled.
\item
A list of all the IR~nodes used to represent procedures in the
module. 
This list is used to map from a ``node id'' to a node.
\item
A mapping from label and procedure names to IR~nodes.
\end{itemize}
<<irnode.asdl>>=
module IRNode (imports RTL) {
  <<ASDL definitions for nodes of abstract \PAL>>
}
@
Because ASDL handles trees, not graphs, we represent a graph as a
list of nodes, and we refer to nodes using integer node ids.
Node ids are intended to be unique per module.
<<ASDL definitions for nodes of abstract \PAL>>=
graph  = (node*)                -- A list of all and only the Label nodes
label = (string?, int)          -- The Ints are unique per compilation unit
                                -- Ditto the names if present
@
Flow-graph nodes are inspired by Table 2 of 
the paper ``Exceptions Need Not Be Exceptional,'' but there are
considerable differences.
In particular, these nodes work only in extended basic blocks.
<<ASDL definitions for nodes of abstract \PAL>>=
node = Entry (continuation*, node next)
     | Exit  (int cont_num, int abnormal_cont_count)
     | CopyIn  (formal*, copy_context, string convention, node next)
     | CopyOut (actual*, copy_context, string convention, node next)
     | CalleeSaves (variable*, node next)
     | Assign (RTL.rtl, node next)
     | Branch (RTL.exp, node true, node false)  -- exp is condition
     | Goto (RTL.exp, label* targets)           -- exp is address of target
     | Call  (RTL.exp, contbund)
     | Yield (RTL.exp, contbund)
     | Jump  (RTL.exp)
     | CutTo (RTL.exp)
attributes (atts enclosing_spans)       -- used for spans
atts = (att*)
att  = UserSpan(int token, RTL.exp value)       -- value is link-time constant
                                                -- token is non-negative
     | Other(private)        
private = Private    -- private attributes not exchanged between passes
@ On entry to a code generator,
the RTL expressions should use no space other than the [[m]]~space (memory); 
other spaces, including hardware registers, are reserved for the
private use of the code generator.
@
We in [[keyvalue]] pairs, we 
use negative [[token]]s for spans that are private between the \PAL{} code
generator and its runtime system.  Notably, liveness information.
@
The list of continuations in the entry node is used to set up the
continuation values.
We need to know a continuation's name, and the node to which it refers.
<<ASDL definitions for nodes of abstract \PAL>>=
continuation = (string, label)
@
The copy nodes ([[Copyin]] for formals and [[Copyout]] for actuals) 
are used in three different contexts.  The contexts must be
identified, because each context is likely to have a different
value-passing convention.
<<ASDL definitions for nodes of abstract \PAL>>=
copy_context = ProcedureParameters    -- used in call, jump, prologue
             | ProcedureResults       -- used in call, return
             | ContinuationParameters -- used in invoke, continuation
@ A formal or actual carries a type and an optional hint.
<<ASDL definitions for nodes of abstract \PAL>>=
formal = (variable, RTL.width, hint?) 
actual = (RTL.exp,  RTL.width, hint?)
@ Note that the type is an RTL type; in particular, the distinction
between [[bits]]$k$ and [[float]]$k$ has been folded into the hints,
according to the following table:
\begin{quote}
\begin{tabular}{|l|l||l|l|}
\hline
\multicolumn2{|c||}{Source}&\multicolumn2{c|}{Intermediate}\\
Type&Hint&Type&Hint\\
\hline
[[bits]]$k$& --- & $k$ & --- \\
\hline
[[bits]]$k$& \emph h & $k$ & \emph h \\
\hline
[[float]]$k$& --- & $k$ & \texttt{float} \\
\hline
[[float]]$k$& \emph  h & $k$ & \texttt{float-} \emph h \\
\hline
\end{tabular}
\end{quote}
<<ASDL definitions for nodes of abstract \PAL>>=
hint = (string)
@
Variables stand for locations.  On entry, they must have been created
with the [[RTL.VAR]] constructor.
We expect that the code generator will eliminate them at the first
possible moment, but the exact strategy for doing so will depend on
the design of the code generator:
\begin{itemize}
\item
A code generator based on VPO would put them all in stack locations.
\item
A code generator based on an Appel-George coalescing allocator would
put them all in temporaries.
\item
A code generator based on Fraser's \texttt{lcc} code generator would
put some in hardware registers and the rest on the stack.
\end{itemize}
<<ASDL definitions for nodes of abstract \PAL>>=
variable = (RTL.location) -- must be VAR constructor on entry
@
The continuation bundle attached to a call shows the possible
continuations: normal, cuts, unwinds, and returns.
<<ASDL definitions for nodes of abstract \PAL>>=
contbund = 
  (node normal, label* cuts, label* unwinds, label* returns, label? aborts)
@ Variables survive calls, but memory locations need not.
Since these are the only locations used by the elaborator, that's all
we need say about the semantics, but we will add that we expect the
code generator will establish, for each new storage space, whether the
locations in that space may be mutated by calls.
@
To compile a procedure, we need its name and the convention for
mangling the name.
For convenience in supporting the run-time procedure [[FindVar]], we
also require the names and types of its formal parameters and local variables,
in declaration order.
(We don't need the calling convention as it's embodied in the copy
nodes in the flow graph.)
<<ASDL definitions for nodes of abstract \PAL>>=
proc = (string name, string? mangling, node body, var_info* formals, var_info* locals)
var_info = (string name, RTL.width)
@ The [[body]] of [[proc]] always starts with a [[Label]] node, then an [[Entry]] node.
The [[name]] field of the [[proc]] must be the same as the [[string]] field (which must be present) 
of the [[Label]] node.

@ \subsection{A program in intermediate form}

Although the AST and IR-node representations are independent, the full
IR representation draws from both.
<<ir.asdl>>=
module IR (imports IRNode imports AST) {
  prog = ( AST.global_info* globals
         , seg* segments
         , IRNode.graph
         ) 
  seg = (AST.segment_name, item*)
  item = Datum (AST.datum)
       | Proc  (IRNode.proc procedure)
}
@
\section{Private data for the {\PAL} code generator}

Clients shouldn't look here, and should not include this code in their
ASDL.
<<irnode.asdl ((codegen))>>=
view OCaml {
 module IRNode <= interface_prologue 
%%
type private_att = LiveVars of RTL.location list
                 | NoCodegen                       (* suppress goto successor *)
                 | LastUses of RTL.location list   (* the deads list *)
%%
 module IRNode <= implementation_prologue 
%%
type private_att = LiveVars of RTL.location list
                 | NoCodegen                       (* suppress goto successor *)
                 | LastUses of RTL.location list   (* the deads list *)
%%
  IRNode.private <= { natural_type : private_att
                      unwrapper : fun _ -> assert false
                      wrapper   : fun _ -> Private
                    }
}
