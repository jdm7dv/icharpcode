% -*- mode: Noweb; noweb-code-mode: sml-mode -*-
% $Id$
\section{Source locations}

This interface provides an abstraction of ``source-code location,''
where a location is a substring, i.e., a contiguous set of character
positions spanned by two endpoints.
The interface also provides the ability to create a mapping from these
locations to ``file-line-column'' format.
Such mappings are typically created in a lexer, which should announce
newlines and resynchronization directives (e.g., C's~[[#line]]) using
this interface.


Lexers and parsers are likely to work with \emph{regions}, where
a {region} represents a contiguous span of
source locations in an (unnamed) input file determined by context.
Because of preprocessing, any region could be spread out over multiple
overlapping regions in the original source.

The rest of a compiler is likely to work with \emph{locations}, which
contain a region, plus the context needed to relate that region to
original source locations.


\subsection{Interface}

A source map is maintained as mutable state.
We create such a map by giving the initial character position, file
name, line, and column number.
Column numbers are obtained by counting characters from the beginning
of the line; the first character on the line is deemed to be in
column~1.
Tabs are given no special treatment.

Character positions increase as the compiler moves through the source,
and the lexer mutates the source map any time something interesting
happens.
The two interesting events are:
\begin{itemize}
\item
The lexer encounters a newline (changing the line number in the source
file).
\item
The lexer encounters \verb+#line+ or its equivalent, changing the
source coordinates.
By analogy with the \texttt{{\tt lcc}} implementation, I call this
event a \emph{resynchronization}.
A resynchronization must change the line number.
It may change the file name and column number; if not specified they
default to the current file name and~1, respectively.
As suggested by John Reppy,
a resynchronization can specify a line number of~0 (in order to make
the numbering of the following line come out right).
\end{itemize}
Character positions must be nonnegative, and they must
increase in successive mutations of a single
[[sourcemap]] (where the initialization counts as a mutation).

[[forgetOldPositions]] causes the sourcemap to discard information
about positions already known to the source map.
Subsequent queries may refer only to new positions (which must still
be larger than the old ones).
The only reason to call [[forgetOldPositions]] is to prevent space leaks.

[[lastChange]] returns the position of the last mutation, or the
initial position if no mutations have taken place.

[[Point.sourceloc]] and [[Location.sourcelocs]] map character positions and regions
back to the source level.
If the null region is passed to [[Location.sourcelocs]], it returns the empty list.
In any pair returned by [[Location.sourcelocs]], the two source locations are
guaranteed to have the same file name.
[[Location.newline_count]] returns the number of newlines that occurred in the given
region.
<<interface>>=
(*module Sourcemap*)
type charpos = int
type region = charpos * charpos
module Region : sig
  val null : region
  val span : region -> region -> region
    (* smallest region containing the two regions *)
end

type sourceloc = {fileName:string; line:int; column:int}

type map (* mutable datatype *)
module Map : sig
  val null : map
  val create : charpos -> sourceloc -> map
  val last_change : map -> charpos
  val compare : map -> map -> int  (* cheaper than the standard compare *)
  module Announce : sig (* mutations are here *)
    type resynch_directive = {fileName:string option; line:int; column:int option}
    val newline : map -> charpos -> unit (* mutates *)
    val resynch : map -> charpos -> resynch_directive -> unit
    val forgetOldPositions : map -> unit
  end
end

type location = map * region
type point    = map * charpos

module Location : sig
  val string : location -> string
  val sourcelocs : location -> (sourceloc * sourceloc) list
  val newline_count: location -> int
end

module Point : sig
  val sourceloc : point -> sourceloc
end

module Sourceloc : sig
  val sourcelocs_string : (sourceloc * sourceloc) list -> string
end
@
The [[nullRegion]] refers to no region in particular; it is a left and
right identity of [[span]].


@
\subsection{Implementation}

I can imagine at least three implementations: one that doesn't
support resynchronization, one that supports resynchronization only at
column 1, and one that supports arbitrary resynchronization.

This implementation supports arbitary resynchronization.
@
A character position is an integer.  A region is delimited by the
position of the start character and one beyond the end.
It might help to think of Icon-style positions, which fall between
characters.
<<implementation>>=
type charpos = int
type region = charpos * charpos
module Region = struct
  let null : region = (0,0)
  let span ((l1, h1) as left) ((l2, h2) as right) = 
         if left = null then right
         else if right = null then left
         else if l1 < h2 then (l1, h2) else (l2, h1)
end
@ The empty region is conventional.
@
The representation of a source map is a pair of lists.
[[linePos]] records line numbers for newlines \emph{and}
resynchronization.
[[resynchPos]] records file name and column for resynchronization.
The representation satisfies these invariants:
\begin{itemize}
\item
The lists are never empty (initialization is treated as a resynchronization).
\item
Positions decrease as we walk down the lists.
\item
The last element in each list contains the smallest valid position.
\item
For every element in [[resynchPos]], there is a corresponding element in
[[linePos]] with the same position.
\end{itemize}
We could get even more clever and store file names only when they
differ, but it doesn't seem worth it---we would have to get very
clever about tracking column numbers and resynchronizations.
<<implementation>>=
type map = { mutable resynchPos: (charpos * string * int) list 
           ; mutable linePos:    (charpos * int)          list
           ; uid : int  (* for comparison *)
           }
@ In addition to the lists, we use a unique id for speedier
comparison.
<<implementation>>=
type sourceloc = {fileName:string; line:int; column:int}
<<utilities>>
module Map = struct
  let compare = fun {uid=u1} {uid=u2} -> compare u1 u2
  <<map exports>>
end
@
<<map exports>>=
(* local definitions *)
  let n = ref 0
  let uid() = (incr n; !n)

(* exported *)
  let create pos {fileName=f; line=l; column=c} =
    {resynchPos=[(pos, f, c)]; linePos=[(pos, l)]; uid=uid()}
  let null : map =
    {resynchPos=[(0, "not a real source map", 0)]; linePos=[(0, 0)]; uid= -. 99}
@
Since important lists are never empty, I define this function:
<<utilities>>=
let hd x = try List.hd x with Failure "hd" -> assert false
<<map exports>>=
module Announce = struct
  type resynch_directive = {fileName:string option; line:int; column:int option}

  let resynch map pos {fileName=f; line=l; column=c}
    =  let file_of (_, f, _) = f
    in let curFile = file_of (hd (map.resynchPos))
    in let thefile = function
         | Some file -> if file = curFile then curFile else file
                                     (* pathetic attempt at hash-consing *)
         | None      -> file_of (hd (map.resynchPos))    
    in  ( map.resynchPos <- (pos, thefile f, Option.get c 1) :: map.resynchPos
        ; map.linePos    <- (pos, l) :: map.linePos
        )
  <<map announce exports>>
end
@
Since [[pos]] is the position of the newline, the next line doesn't
start until the succeeding position.
<<map announce exports>>=
let newline map pos =
  let line = snd (hd map.linePos)
  in  map.linePos <- (pos+1, line+1) :: map.linePos
<<map exports>>=
let last_change map = fst (hd map.linePos)
@
A generally useful thing to do is to remove from the lists the initial
sequences of tuples
whose positions satisfy some predicate:
<<utilities>>=
let remove p map = 
  let rec strip  = function
        | ((pos, _   )::rest) as l -> if p pos then strip  rest else l
        | [] -> []
  and strip' = function
        | ((pos, _, _)::rest) as l -> if p pos then strip' rest else l
        | [] -> []
  in  (strip' map.resynchPos, strip map.linePos)
@
We find file and line number by linear search.
The first position less than [[p]] is what we want.
The initial column depends on whether we resynchronized.
<<utilities>>=
let column (pos, file, col) (pos', line) p =
  if pos = pos' then p - pos + col else p - pos' + 1
@
<<implementation>>=
type point = map * charpos
module Point = struct
  let sourceloc (smap, p) : sourceloc = 
       let (files, lines) = remove (function pos -> pos > p) smap
    in let (_, file, _) as xx = hd files
    in let (_, line   ) as yy = hd lines
    in {fileName = file; line = line; column = column xx yy p}
end
@ Searching regions is a bit trickier, since we track file and line
simultaneously.  We exploit the invariant that every file entry has a
corresponding line entry.
We also exploit that only file entries correspond to new regions.
<<implementation>>=
type location = map * region
module Location = struct
  <<location exports>>
end
<<location exports>>=
let sourcelocs (map, (lo, hi)) =
  if (lo,hi) = Region.null then [] else
      let rec gather = function
           | ((p, file, col)::files, (p', line)::lines, region_end, answers) ->
               if p' <= lo then (* last item *)
                 ( {fileName=file; line=line;
                    column=column (p, file, col) (p', line) lo}
                 , region_end
                 ) :: answers
               else
                 if p < p' then
                   gather((p, file, col)::files, lines, region_end, answers)
                 else (* p = p'; new region *)
                   gather(files, lines, end_of p (hd files) (hd lines), 
                          ({fileName = file; line = line; column = col}, region_end)
                          :: answers)
           | _ -> assert false
      and end_of lastpos ((p, file, col) as xx) ((p', line) as yy) = 
             {fileName=file; line=line; column=column xx yy lastpos}
   in let (files, lines) = remove (function pos -> pos >= hi && pos > lo) map
   in let null = function [] -> true | _ :: _ -> false
   in assert (not (null files) && not (null lines));
      let answer = gather(files, lines, end_of hi (hd files) (hd lines), [])
   in let rec validate = function
        | ({fileName=f;  line=l;  column=c}, 
           {fileName=f'; line=l'; column=c'}) :: rest ->
              if f = f' && (l' > l || (l' = l && c' >= c)) then
                validate rest 
              else 
                assert false
        | [] -> ()
  in  validate answer; answer
@ [[validate]] checks the invariant that single regions occupy a
single source file and that coordinates are nondecreasing.
@
When discarding old positions, we have to be careful to maintain the
last part of the invariant.
<<map announce exports>>=
let forgetOldPositions map
  =  let (p,  file, col) as r = hd (map.resynchPos)
  in let (p', line)      as l = hd (map.linePos)
  in map.linePos <- [l];
     map.resynchPos <- [if p = p' then r else (p', file, 1)]
@
<<location exports>>=
let newline_count (map, (lo, hi)) =
        let (hifiles, hilines) = remove (function pos -> pos >= hi && pos > lo) map
     in let (lofiles, lolines) = remove (function pos ->              pos > lo) map
     in let length = List.length
     in length hilines - length hifiles - (length lolines - length lofiles)
<<location exports>>=
let locationString' single pairs =
        let shortpoint loc l =
              string_of_int loc.line :: "." :: string_of_int loc.column :: l
     in let showpoint p l = p.fileName :: ":" :: shortpoint p l
     in let allfiles f = List.for_all (function (src, _) -> src.fileName = f)
     in let rec lastpos = function
              | [(_, hi)] -> hi
              | (h::t) -> lastpos t
              | [] -> assert false
     in  String.concat ""
            (match pairs with
             | [(lo, hi)] ->  (* should really test original positions here *)
                    if single then showpoint lo []
                    else showpoint lo ("-" :: shortpoint hi [])
             | (lo, _) :: rest ->
                    if allfiles lo.fileName rest then
                      showpoint lo ("..." :: shortpoint (lastpos rest) [])
                    else
                      showpoint lo ("..." :: showpoint  (lastpos rest) [])
             | [] -> ["<nullRegion>"]
            )

let string ((map, (p1, p2)) as loc) = locationString' (p1+1 >= p2) (sourcelocs loc)
<<implementation>>=
module Sourceloc = struct
  let sourcelocs_string = function
      | [] -> Location.locationString' false []
      | (lo, hi)::t as pairs ->
          let next {fileName=f; line=l; column=c} = {fileName=f; line=l; column=c+1}
          in  Location.locationString' (lo=hi || next lo=hi) pairs
  <<sourceloc exports>>
end
<<sourceloc exports>>=
@
