% -*- mode: Noweb; noweb-code-mode: c-mode -*-

% l2h substitution qquad &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

\nwanchorname{assembly}{\section{An Interface to Assembly Languages}}


\ifhtml
\tableofcontents
\fi

% l2h macro nwanchorname 2 <a name=#$1>#2</a>
This document describes an ASDL datatype that can represent an
assembly-language program.
Representations of instructions, labels, and relocatable addresses
are left as abstract as possible.
We expect that the representation of
instructions will change with every machine.
@
We hope that there will eventually be tools to do three thigns with
this interface: emit assembly
language, emit object code, and help emit RTLs for \emph{vpo}.%
\footnote{The interface may also be used within \emph{vpo}, which will then
emit assembly language or object code.}
Therefore, this interface does not attempt to be the best possible
interface for assembly; rather, it defines a plausible
interface that is consistent with existing assemblers.
@
The design of the interface is similar to that of the New Jersey
Machine-Code Toolkit's
library.
We imagine that implementations supporting binary emission would in
fact use the Toolkit.
Nonetheless, this interface attempts to be independent of the Toolkit.
@

An assembly-language program is described by a sequence of actions the
assembler is requested to take.
The assembler is also passed a list of strings it can use to intialize
itself.
<<asm.asdl>>=
module Asm {
  program = (string* initialization_args, action*)
  action = <<constructors for actions>>
  <<assembly interface types>>
  opaque = (string)
}
@ ASDL has no abstraction, so we use [[string]] to represent an opaque
type.
@
Tables \ref{tab:asm-ty}, \ref{tab:asm-int-fun}, and
\ref{tab:asm-fun} summarize the types and functions exported by this interface.
@
\subsection{What the assembler does}

Like most assemblers, this one operates with a collection of named
``sections,'' one of which is the ``current section.''
A section identifies a contiguous block of memory in the running
process image.
Typically, the location at which the section is mapped is not known
until link time.

Much of the assembler's job is determining the contents of the
sections. 
Each section has a ``location counter,'' which identifies a current
location.
The location counter is an integer, and the current location is the
location at that offset from  the beginning of the current section.
Many actions in this
interface are intended to deposit data (or instructions) at the
current location and advance the location counter.

The assembler also uses names to refer to constants or to locations
within sections.
To support separate compilation,
names may include references to locations defined in other
compilations; such references are resolved at link time.

@
\begin{table}
\noindent\begin{tabularx}{\textwidth}{|l|l|X|}
\multicolumn1{l}{Type}&\multicolumn2{l}{Abbreviation\qquad Meaning}\\
\noalign{\smallskip}
\hline
[[label]]&\emph{label}& A label.\\
\hline
[[reladdr]]&\emph{relAddr}&A relocatable address.\\
\hline
[[symbol]]&\emph{sym}&An assembly-language symbol.\\
\hline
[[instruction]]&\emph{instr}&A machine instruction.\\
\hline
\end{tabularx}
\caption{Types used in this interface}
\label{tab:asm-ty}

% l2h let providecommand newcommand
\providecommand\category[1]{%
  \noalign{\medskip}\multicolumn2{l}{\qquad \emph{#1}}\\\noalign{\smallskip}}
% l2h macro category 1 <em>#1</em></td></tr><tr><td>

\newcolumntype{Y}{>{\raggedright\arraybackslash}X}
\noindent\begin{tabularx}{\textwidth}{|>{\setlength\hsize{1.15\hsize}}>{\small\hangindent=2em\hangafter=1}Y|>{\setlength\hsize{0.85\hsize}}Y|}
\category{Relocatable addresses}
\hline
[[Asm_newaddr  (]]\rlap{\emph{label}}\phantom{\emph{relAddr}} [[l, int offset)]]&Create address $L+k$.\\
\hline
[[Asm_shiftaddr(]]\emph{relAddr} [[a, int offset)]]&Create address $a+k$.\\
\hline
[[Asm_symreloc (Assembler, const char *)]]&Find relocatable address
corresponding to name.\\
\hline
\end{tabularx}\\

\caption{Other functions defined in this interface}
\label{tab:asm-int-fun}

\end{table}

\begin{table}
\setlength\extrarowheight{0.6pt}
\providecommand\category[1]{%
  \noalign{\vskip0.7\medskipamount}%
  \multicolumn2{l}{\qquad \emph{#1}}\\
  \noalign{\vskip0.7\smallskipamount}}

\noindent\begin{tabularx}{\textwidth}{|>{\setlength\hsize{0.88\hsize}}>{\small\hangindent=1.5em\hangafter=1\raggedright\arraybackslash}X|>{\setlength\hsize{1.12\hsize}}X|}
\category{Symbols and names}
\hline
[[Import(string)]]&Symbol for imported name.\\
\hline
[[Export(string)]]&Symbol for exported name.
\\\hline
[[Local (string)]]&Symbol for local (private) name.
\\\hline
% l2h ignore break
[[Common(string name,]] \hfil\break[[int size, int align, string section)]]&
Common symbol.
\\\hline
[[Lookup(string)]]&
The symbol with the given name.
\\\hline
[[Offset(string,]] \rlap{\emph{sym}[[, int)]]}&
A symbol defined relative to another symbol (deprecated).
\\\hline
\category{Actions related to symbols and names}
\hline
[[DefineSymbolHere (]]\emph{sym}[[)]]&
Bind the symbol to the current location (e.g., define label).
\\\hline
[[DefineSymbolConst(]]\emph{sym}\rlap{[[, int)]]}&
Bind a symbol to a constant.
\\\hline
[[Function(]]\emph{sym}[[)]]&
Start a function definition.
\\\hline
\category{Sections and the location counter}
\hline
[[Section(string)]]&
Change sections.
\\\hline
[[CurrentSection(void)]]&
Return the name of the current section.
\\\hline
[[Org(int n)]]&
Set the location counter to [[n]].
\\\hline
[[Align(int n)]]&
Round the location counter to an [[n]]-byte boundary.
\\\hline
[[Addlc(int n)]]&
Add [[n]] to the location counter.
\\\hline
\category{Emitting values and instructions}
\hline
[[EmitZeroes(int n)]]&
Write [[n]] zero bytes.
\\\hline
[[EmitInstruction(]]\emph{instruction}[[)]]&
Emit an instruction.
\\\hline
[[Emit(int value, int width)]]&
Emit [[value]] ([[width]] bytes wide).
\\\hline
[[Emita(reladdr)]]&
Emit a relocatable address.
\\\hline
[[Emitf32(int sign, int exp, int mantissa)]]&
Emit a 32-bit IEEE float.
\\\hline
[[Emitf64(int sign, int exp, int mhi, int mlo)]]&
Emit a 64-bit IEEE float.
\\\hline
[[Emitf32s(string)]]&
Emit a 32-bit IEEE float (from string).
\\\hline
[[Emitf64s(string)]]&
Emit a 64-bit IEEE float (from string).
\\\hline
\category{Miscellaneous}
\hline
[[Comment(string)]]&
Insert a comment.
\\\hline
[[Asmtext(string)]]&
Insert arbitrary text into the assembly language (deprecated).
\\\hline
\end{tabularx}

\caption{More actions}

\label{tab:asm-fun}

\end{table}


@
\subsection{Labels and relocatable addresses}

Labels and relocatable addresses both resolve to integers at link
time.
Labels, but not relocatable addresses, can be bound to locations or to
values.
The reason for distinguishing labels and relocatable addresses is that
labels can be bound to a location, but relocatable addresses cannot.
Relocatable addresses can nevertheless appear as operands to many
machine instructions, so it is appropriate to use them in RTLs.
<<assembly interface types>>=
label =   Symlabel (symbol)
reladdr = <<constructors for relocatable addresses>>
@
In most assemblers, a relocatable address is:
\begin{itemize}
\item a label, or
\item a relocatable address plus a constant, or
\item a relocatable address plus the difference of two relocatable
addresses.
\end{itemize}
In this assembler,
a relocatable addresses is equivalent to a label plus a constant,
which we normally write~$L+k$.%
\footnote{If you think you need the more general version, perhaps to
generate position-independent jump tables, please write to
\texttt{zephyr-investigators@virginia.edu}.} 
Addresses can be created relative to some label or relative to an
existing address.
<<constructors for relocatable addresses>>=
  Newaddr (label l, int offset)
| Shiftaddr (reladdr a, int offset)
@ Note that labels are not created directly; instead they are part of
assembly-language symbols, as detailed below.
@
\subsection{Names and symbols}
The assembler works with a \emph{single} name space.
Names can be imported, exported, common (Fortran-style), or local to
the compilation unit.%
\footnote{N.B.~the name space is flat, so there is no such thing as a
symbol that is local to a function.} 
Every name is associated with a relocatable address.
Except in the special case of [[offset]], the [[k]]~part of the
relocatable address is zero, so the label part is directly associated
with the name.
Imported labels are unbound.
Exported and local labels are bound either to locations in relocatable
blocks or to integers.
Note that additional information is associated with common symbols.
<<assembly interface types>>=
symbol = Import (string name)
       | Export (string name)
       | Local (string name)
       | Common (string name, int size, int align, string section)
       <<other constructors for symbols>>
@ It is an unchecked error to create a program that registers the same name in
different scopes.  Multiple calls to [[Import]] with the same name are
Ok.  It is not determined whether implementations can handle multiple
calls of [[Export]] or [[Local]] with the same name.
\iffalse
% Irrelevant now that define uses symbols not names
Undeclared names are
assumed to be imported, unless they are defined,
in which case they are assumed to be local.
\fi

A common symbol may be declared in multiple compilation
units, with multiple sizes and alignments.
The linker reserves an area with the largest size and the most
strict alignment, and the symbol is bound to the address of that area.
The area is reserved in the section specified in the [[Common]]
directive; it is an unchecked (link-time) error to declare a common
symbol in different sections.
Some assemblers or linkers may restrict the sections in which common
symbols may be declared, and some linkers may require that the same
size and alignment be used in all declarations of a common symbol.
Consult the Processor Supplement for information about restrictions.


@
Symbols that have been registered can be looked up.
It is a checked error to create a program that looks up an unregistered symbol.
<<other constructors for symbols>>=
| Lookup (string name)
@
{\tt lcc} uses an unusual convention for relocatable addresses of the
form $L+k$; it represents them as symbols. 
So as to touch the {\tt lcc} back ends as little as possible, we make
it possible to create a new symbol that represents an offset from an
existing symbol. 
Such symbols have no labels associated with them.
To create $p=L+k$, we call \mbox{$\mathtt{Offset}(p, L, k)$}.
<<other constructors for symbols>>=
| Offset (string name, symbol, int)
@ [[Offset]] is deprecated and may be removed from a future version of
this interface.
@
Local symbols can be defined to point at the current location in the
current relocatable block, or to be constants.
<<constructors for actions>>=
  DefineSymbolHere  (symbol)
| DefineSymbolConst (symbol, int)
@ It is an unchecked runtime error to define the same symbol twice.
@
For convenience only,
we provide a generic routine for mapping names to relocatable
addresses by looking up names in the assembler's symbol table.
<<constructors for relocatable addresses>>=
| Symreloc (string name)
@
\subsection{Procedures}
It may be useful, especially when generating MIPS assembly code,
to announce the beginnings of procedures.
(Why not also the ends?  Why not delete this function from the
interface?
What about textual assembly languages that require register-save masks
and similar goo?
Perhaps a better strategy is to require machine-specific extensions to
 the interface?)
<<constructors for actions>>=
| Function (symbol)
@
\subsection{Sections}
The semantic model of a section is that of a relocatable block as
defined by the New Jersey Machine-Code Toolkit, which is roughly a
sequence of bytes plus the location counter.
This interface is substantially simpler than the Toolkit, however,
because it does not provide for examining the contents of a
section, but only for writing them.
@
Sections are referred to by name.
The exact set of valid section names is determined by the target
machine and~OS; it is documented in the Processor Supplement.
Most targets are likely to support [["text"]] for code and
[["data"]] for initialized data.
[[Section]] switches to a given section.
<<constructors for actions>>=
| Section (string name)
@
The location counter, [[lc]], is a nonnegative offset into a section,
measured in bytes.
The location counter is considered part of the section, so [[Section]]
saves the current location counter and restores the proper one for the
new section.

The location counter of the current section
can be manipulated in various ways:
<<constructors for actions>>=
| Org   (int n)          -- set lc to n 
| Align (int n)          -- round lc up to an n-byte boundary
| Addlc (int n)          -- add n to lc
@ If advancing the location counter results in unwritten areas in a
section, the contents of those areas are undefined.
It's also possible to advance the location counter by filling in
with zeroes:
<<constructors for actions>>=
| EmitZeroes (int n)    -- write n zero bytes
@
\subsection{Instructions}
[[EmitInstruction]] emits an instruction at the current location.
The definition of [[instruction]] is machine-dependent and not
part of this interface.
(In fact, an application like a compiler might use this interface with
more than one representation of instruction, in which case one would
have to do some jujitsu involving ASDL views --- ugh.)
A (machine-dependent) definition of
[[instruction]] might be generated automatically from a SLED description of
the instruction set. 
<<constructors for actions>>=
| EmitInstruction (instruction)
<<assembly interface types>>=
instruction = (opaque)
@
\subsection{Values}
\subsubsection{Integers}
We can emit single integers up to the largest width supported.
The width is given explicitly in bytes.
We can also emit relocatable addresses in the native pointer size of
the target machine.\footnote{But \emph{which} native pointer size?
The native code pointer size, or the native data pointer size?  A conundrum.}
<<constructors for actions>>=
| Emit  (int value, int width)  -- emit value of given width (in bytes)
| Emita (reladdr)               -- emit address
@ Although ASDL pickles support integers of arbitrary size, ASDL data
types do not.  Therefore, if it is desired to support cross-assembly
to a machine with a larger word size than the host machine, large
constants will have to be emitted in pieces.
This requirement should not represent an undue burden because large
constants will have to be represented using multiple host words
anyway.
@
\subsubsection{Floats}

ASDL has no floating-point values.
Small hardship;
since we take cross-compilation as routine, we can't pass host
floating-point values anyway.
We encode floating-point values as sign, exponent,
mantissa, or as ASCII.
Passing the mantissa may require two words, [[mlo]] for the least
significant 32~bits, and [[mhi]] for the remaining most significant bits.
<<constructors for actions>>=
| Emitf32  (int sign, int exp, int mantissa)
| Emitf64  (int sign, int exp, int mhi, int mlo)
| Emitf32s (string)
| Emitf64s (string)
@ These functions emit IEEE~754 floating-point values of 32 and 64
bits.  Compilers wishing to emit infinities or NaNs must use [[emit]]
to emit the binary representation.
@

\subsection{Comments}
This function may be used to attempt to insert a comment into the output.
Only implementations that emit ASCII assembly language are likely to
succeed in the attempt; all implementations are free to ignore 
[[Comment]] actions.
It is an unchecked runtime error for a comment to contain a newline,
line feed, form feed, etc.
<<constructors for actions>>=
| Comment (string)
@
\subsection{Escape hatch}
This escape hatch can be used to emit textual assembly language directly.
Implementations not based on textual assembly language (e.g., binary
emitters) may ignore this 
information entirely, or they may try to glean something from the
strings.
Use of this action is deprecated.
<<constructors for actions>>=
| Asmtext (string)
@
\ifhtml
\subsection{Index of identifiers}
\nowebindex
\subsection{List of code chunks}
\nowebchunks
\fi
