% -*- mode: Noweb; noweb-code-mode: sml-mode -*-

% l2h substitution PAL C--

\section{ASDL definitions for {\PAL} RTLs}

This format is based on register-transfer lists as described in
\citeN{ramsey:embedded}, but extended so that locations and values can
be bound late.
There are also the following changes:
\begin{itemize}
\item
We recognize the Boolean type explicitly.
\item
We don't put an optional [[ty]] on the [[CONST]] constructor, because
it's never of any use.
\end{itemize}
Note that although expressions can have type [[bool]], only values of
type [[#n bits]] can be fetched, stored, or put into a variable.
<<rtl.asdl>>=
module RTL {
  rtl      = RTL   (guarded*)
  guarded  = GUARDED (exp, effect)
  effect   = STORE (location dst, exp src, width)
           | KILL  (location)
           | KILLALL(space)
  cell     = CELL  (space, exp)
  location = AGG   (aggregation, cell)
           | VAR   (string name, width)
  exp      = CONST (const)
           | FETCH (location, width)
           | APP   (operator, exp*)
  width = (int)  -- width in bits
  space = (char)
  
  -- these are somewhat arbitrary, since ASDL doesn't have char or boolean types
  -- the claim is these definitions can be overridden using ``views''
  
  char = (int)
  bool = (int)
  
  const = BOOL (bool)
        | INT (int, width)
        | LINK_CONST (string name, width)
  
  -- an operator is an operator name, possibly specialized to certain widths
  operator = (opname, width*)
  opname = (identifier) --- totally bogus, but ASDL has no opaque types
  
  aggregation = (agg_type add, width narrow, width wide)
  agg_type
    = BIG_ENDIAN
    | LITTLE_ENDIAN
    | IDENTITY
    | USER_AGG (identifier)
}
@
Now, some views to make it fit ML.
<<rtl.asdl>>=
view SML {
 module RTL <= implementation_prologue 
%%
fun int2bool i = i <> 0
fun bool2int p = if p then 1 else 0
%%
  RTL.char <= { natural_type : Char.char
                wrapper : Char.ord
                unwrapper : Char.chr 
              }
  RTL.bool <= { natural_type : Bool.bool
                wrapper  : bool2int
                unwrapper : int2bool
              }
}
@
And Caml views
<<rtl.asdl>>=
view OCaml {
 module RTL <= interface_prologue 
%%
type local_char = char
type local_bool = bool
%%
 module RTL <= implementation_prologue 
%%
type local_char = char
type local_bool = bool
let int2bool i = i <> 0
let bool2int p = if p then 1 else 0
%%
  RTL.char <= { natural_type : local_char
                wrapper : int_of_char
                unwrapper : char_of_int
              }
  RTL.bool <= { natural_type : local_bool
                wrapper  : bool2int
                unwrapper : int2bool
              }
}
